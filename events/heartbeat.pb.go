// Code generated by protoc-gen-gogo.
// source: heartbeat.proto
// DO NOT EDIT!

package events

import proto "github.com/gogo/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

// / A Heartbeat event both indicates liveness of the emitter, and communicates counts of events processed.
type Heartbeat struct {
	SentCount                *uint64 `protobuf:"varint,1,req,name=sentCount" json:"sentCount,omitempty"`
	ReceivedCount            *uint64 `protobuf:"varint,2,req,name=receivedCount" json:"receivedCount,omitempty"`
	ErrorCount               *uint64 `protobuf:"varint,3,req,name=errorCount" json:"errorCount,omitempty"`
	ControlMessageIdentifier *UUID   `protobuf:"bytes,4,opt,name=controlMessageIdentifier" json:"controlMessageIdentifier,omitempty"`
	XXX_unrecognized         []byte  `json:"-"`
}

func (m *Heartbeat) Reset()         { *m = Heartbeat{} }
func (m *Heartbeat) String() string { return proto.CompactTextString(m) }
func (*Heartbeat) ProtoMessage()    {}

func (m *Heartbeat) GetSentCount() uint64 {
	if m != nil && m.SentCount != nil {
		return *m.SentCount
	}
	return 0
}

func (m *Heartbeat) GetReceivedCount() uint64 {
	if m != nil && m.ReceivedCount != nil {
		return *m.ReceivedCount
	}
	return 0
}

func (m *Heartbeat) GetErrorCount() uint64 {
	if m != nil && m.ErrorCount != nil {
		return *m.ErrorCount
	}
	return 0
}

func (m *Heartbeat) GetControlMessageIdentifier() *UUID {
	if m != nil {
		return m.ControlMessageIdentifier
	}
	return nil
}

func init() {
}
